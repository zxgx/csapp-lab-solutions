#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax			# count = 0;
	rrmovq %rdx, %rcx
	iaddq $-1, %rcx			# limit = len - k + 1, k=2
	andq %rcx, %rcx			# limit <= 0?
	jle Rest				# if so, goto Rest
Loop:  
	# loop unrolling by 2 elements
	mrmovq (%rdi), %r9
	mrmovq $8(%rdi), %r10
	andq %r9, %r9
	jle Pos1
	iaddq $1, %rax
Pos1:
	rmmovq %r9, (%rsi)
	andq %r10, %r10
	jle Pos2
	iaddq $1, %rax
Pos2:
	rmmovq %r10, $8(%rsi)
	iaddq $-2, %rcx
	iaddq $-2, %rdx
	iaddq $0x10, %rdi
	iaddq $0x10, %rsi
	andq %rcx, %rcx
	jg Loop
Rest:
	andq %rdx, %rdx			# len <= 0?
	jle Done				# if so, Done
	mrmovq (%rdi), %r10	# read val from src...
	rrmovq %rax, %rcx
	iaddq $1, %rcx
	andq %r10, %r10			# val > 0?
	rmmovq %r10, (%rsi)		# ...and store it to dst
	cmovg %rcx, %rax		# count++ : count

	iaddq $-1, %rdx			# len--
	iaddq $8, %rdi			# src++
	iaddq $8, %rsi			# dst++
	andq %rdx,%rdx			# len > 0?
	jg Rest					# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
